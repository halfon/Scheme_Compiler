/* MAKE_VECTOR.asm * Takes an integer n and an element and put in R0 a vector compund from n times the given element */ MAKE_VECTOR:  PUSH(FP);  MOV(FP, SP);  PUSH(R1);    CMP(FPARG(1), IMM(0));  JUMP_EQ(HAS_NO_ARGS_MAKE_VECTOR);  CMP(FPARG(1), IMM(1));  JUMP_EQ(HAS_ONE_ARG_MAKE_VECTOR);  CMP(FPARG(1), IMM(2));  JUMP_GT(TOO_MANY_ARGS_MAKE_VECTOR);  CMP(IND(FPARG(2)),T_INTEGER);  JUMP_NE(NOT_VALID_ARG_MAKE_VECTOR);  MOV(R1,INDD(FPARG(2),1));  START_LOOP_MAKE_VECTOR:  CMP(R1,IMM(0));  JUMP_EQ(END_MAKE_VECTOR);  PUSH(FPARG(3));  DECR(R1);  JUMP(START_LOOP_MAKE_VECTOR);      END_MAKE_VECTOR:  PUSH(INDD(FPARG(2),1));  CALL(MAKE_SOB_VECTOR);  MOV(R1,INDD(FPARG(2),1));  INCR(R1);  DROP(R1);   POP(R1);  POP(FP);  RETURN;    HAS_ONE_ARG_MAKE_VECTOR:  CMP(IND(FPARG(2)),T_INTEGER);  JUMP_NE(NOT_VALID_ARG_MAKE_VECTOR);  MOV(R1,INDD(FPARG(2),1));  PUSH(IMM(0));  CALL(MAKE_SOB_INTEGER);  DROP(1);  START_LOOP_MAKE_VECTOR_OF_ZEROS:  CMP(R1,IMM(0));  JUMP_EQ(END_MAKE_VECTOR_ZEROS);  PUSH(R0);  DECR(R1);  JUMP(START_LOOP_MAKE_VECTOR_OF_ZEROS);    END_MAKE_VECTOR_ZEROS:  PUSH(INDD(FPARG(2),1));  CALL(MAKE_SOB_VECTOR);  MOV(R1,INDD(FPARG(2),1));  INCR(R1);  DROP(R1);  POP(R1);  POP(FP);  RETURN;    NOT_VALID_ARG_MAKE_VECTOR:  CALL(ERROR_NOT_VALID_ARG);    HAS_NO_ARGS_MAKE_VECTOR:  CALL(ERROR_NOT_ENOUGH_ARGS);    TOO_MANY_ARGS_MAKE_VECTOR:  CALL(ERROR_TOO_MANY_ARGS);