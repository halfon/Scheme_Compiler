/* APPEND.asm * Takes a variadic number of proper lists (end with nill) and optional last object * and return in R0 the list compound from all the elements in the list and the last object if exist */ APPEND:  PUSH(FP);  MOV(FP, SP);  PUSH(R1); // יכיל את הרשימה המצטברת  PUSH(R2); // מספר שירוץ על הארגומנטים (כל הרשימות  PUSH(R3); // יצביע על הזוג האחרון ברשימה המצטברת  PUSH(R4); // משתנה עזר  PUSH(R5); // יחזיק בכל איטרציה את הרשימה הנוכחית   // לא לקרוא למייק ליסט עם רשימה ריקה!   //לדחוף קודם את הרשימה ואז מספר ארגומנטים ואז מספר כלשהו לסביבה    MOV(R2,IMM(2));  MOV(R4,FPARG(1));  INCR(R4);    CMP(FPARG(1), IMM(0));  JUMP_EQ(EMPTY_APPEND);  CMP(FPARG(1), IMM(1));  JUMP_EQ(ONE_ARG_APPEND);    CREATE_FIRST_LIST_APPEND:  CMP(FPARG(R2),IMM(2));  JUMP_EQ(FIRST_EMPTY_LIST_APPEND);  MOV(R1,FPARG(R2));  PUSH(R1);  PUSH(IMM(1));  PUSH(IMM(5));  CALL(MAKE_LIST);  DROP(3);  MOV(R1,R0);  MOV(R3,R1);  FIRST_LAST_PAIR_APPEND:  CMP(INDD(R3,2),IMM(2));  JUMP_EQ(LOOP_APPEND);  MOV(R3,INDD(R3,2));  JUMP(FIRST_LAST_PAIR_APPEND);    FIRST_EMPTY_LIST_APPEND:  INCR(R2);  CMP(R2,R4);  JUMP_EQ(ONE_ARG_APPEND);  CMP(IND(FPARG(R2)),IMM(T_PAIR));  JUMP_EQ(CREATE_FIRST_LIST_APPEND);  CMP(FPARG(R2),IMM(2));  JUMP_EQ(FIRST_EMPTY_LIST_APPEND);    LOOP_APPEND:  INCR(R2);  CMP(R2,R4);  JUMP_EQ(FINISH_APPEND);  CMP(FPARG(R2),IMM(2));  JUMP_EQ(EMPTY_LIST_APPEND);  MOV(R5,FPARG(R2));  PUSH(R5);  PUSH(IMM(1));  PUSH(IMM(5));  CALL(MAKE_LIST);  DROP(3);  MOV(R5,R0);  MOV(INDD(R3,2),R5);  LAST_PAIR_APPEND:  CMP(INDD(R3,2),IMM(2));  JUMP_EQ(LOOP_APPEND);  MOV(R3,INDD(R3,2));  JUMP(LAST_PAIR_APPEND);    EMPTY_LIST_APPEND:  JUMP(LOOP_APPEND);    FINISH_APPEND:  MOV(INDD(R3,2),FPARG(R2));  MOV(R0,R1);  POP(R5);  POP(R4);  POP(R3);  POP(R2);  POP(R1);  POP(FP);  RETURN;    ONE_ARG_APPEND:  MOV(R0,FPARG(R2));  POP(R5);  POP(R4);  POP(R3);  POP(R2);  POP(R1);  POP(FP);  RETURN;    EMPTY_APPEND:  MOV(R0,IMM(2));  POP(R5);  POP(R4);  POP(R3);  POP(R2);  POP(R1);  POP(FP);  RETURN;