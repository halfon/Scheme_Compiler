/* REMAINDER.asm * Returns the integer remainder of ARG1 and ARG2, * The result of remainder has the same sign as ARG1 */ REMAINDER:  PUSH(FP);  MOV(FP, SP);  PUSH(R1);    CMP(FPARG(1), IMM(2));  JUMP_LT(HAS_NO_ARGS_REMAINDER);  JUMP_GT(TOO_MANY_ARGS_REMAINDER);  CMP(IND(FPARG(2)),T_INTEGER);  JUMP_NE(NOT_VALID_ARG_REMAINDER);  CMP(IND(FPARG(3)),T_INTEGER);  JUMP_NE(NOT_VALID_ARG_REMAINDER);    MOV(R1,INDD(FPARG(2),1));  REM(R1,INDD(FPARG(3),1));  CMP(INDD(FPARG(2),1),IMM(0));  JUMP_GE(POSITIVE_REM);  CMP(R1,IMM(0));  JUMP_LT(END_REM);  MUL(R1,IMM(-1));  JUMP(END_REM);  POSITIVE_REM:  CMP(R1,IMM(0));  JUMP_GE(END_REM);  MUL(R1,IMM(-1));    END_REM:  PUSH(R1);  CALL(MAKE_SOB_INTEGER);  DROP(1);  POP(R1);  POP(FP);  RETURN;    NOT_VALID_ARG_REMAINDER:  CALL(ERROR_NOT_VALID_ARG);    HAS_NO_ARGS_REMAINDER:  CALL(ERROR_NOT_ENOUGH_ARGS);    TOO_MANY_ARGS_REMAINDER:  CALL(ERROR_TOO_MANY_ARGS);