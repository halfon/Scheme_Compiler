/* plus.asm * Computes the sum of variadic number of integers: R0 <- ARG[0] + ARG[1] +... */ PLUS:  PUSH(FP);  MOV(FP, SP);  PUSH(R1); // R0 is mone, R1 is the counter, R2 is mechane, R3 for assistance  PUSH(R2);  PUSH(R3);  PUSH(R4);    MOV(R4,FPARG(1));  CMP(R4, IMM(0));  JUMP_EQ(L_ZERO_ARGS_PLUS);    CALL(MAKE_ARGS_FRACTIONS);  MOV(R0, INDD(FPARG(2),1));  MOV(R2, INDD(FPARG(2),2));  MOV(R1, IMM(3));  DECR(R4);    L_START_PLUS:  CMP(R4, IMM(0));  JUMP_EQ(L_FINISH_PLUS);  MUL(R0,INDD(FPARG(R1),2));  MOV(R3,INDD(FPARG(R1),1));  MUL(R3,R2);  ADD(R0,R3);  MUL(R2,INDD(FPARG(R1),2));  INCR(R1);  DECR(R4);  JUMP(L_START_PLUS);    L_FINISH_PLUS:  MOV(R3,R0);  REM(R3,R2);  CMP(R3, IMM(0));  JUMP_EQ(MAKE_INTEGER_PLUS);    PUSH(R2);  PUSH(R0);  CALL(MAKE_SOB_FRACTION);  DROP(2);  JUMP(L_END_PLUS);    MAKE_INTEGER_PLUS:  DIV(R0,R2);  PUSH(R0);  CALL(MAKE_SOB_INTEGER);  DROP(1);    L_END_PLUS:  POP(R4);  POP(R3);  POP(R2);  POP(R1);  MOV(SP,FP);  POP(FP);  RETURN;    L_ZERO_ARGS_PLUS:  PUSH(IMM(0));  CALL(MAKE_SOB_INTEGER);  DROP(1);  POP(R4);  POP(R3);  POP(R2);  POP(R1);  MOV(SP,FP);  POP(FP);  RETURN;