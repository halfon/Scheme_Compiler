/* MAKE_STRING.asm * Takes an integer n and an a char Returns in R0 a string compund from n times the given char */ MAKE_STRING:  PUSH(FP);  MOV(FP, SP);  PUSH(R1);    CMP(FPARG(1), IMM(0));  JUMP_EQ(HAS_NO_ARGS_MAKE_STRING);  CMP(FPARG(1), IMM(1));  JUMP_EQ(HAS_ONE_ARG_MAKE_STRING);  CMP(FPARG(1), IMM(2));  JUMP_GT(TOO_MANY_ARGS_MAKE_STRING);  CMP(IND(FPARG(2)),T_INTEGER);  JUMP_NE(NOT_VALID_ARG_MAKE_STRING);  CMP(IND(FPARG(3)),T_CHAR);  JUMP_NE(NOT_VALID_ARG_MAKE_STRING);  MOV(R1,INDD(FPARG(2),1));  START_LOOP_MAKE_STRING:  CMP(R1,IMM(0));  JUMP_EQ(END_MAKE_STRING);  PUSH(INDD(FPARG(3),1));  DECR(R1);  JUMP(START_LOOP_MAKE_STRING);      END_MAKE_STRING:  PUSH(INDD(FPARG(2),1));  CALL(MAKE_SOB_STRING);  MOV(R1,INDD(FPARG(2),1));  INCR(R1);  DROP(R1);   POP(R1);  POP(FP);  RETURN;    HAS_ONE_ARG_MAKE_STRING:  CMP(IND(FPARG(2)),T_INTEGER);  JUMP_NE(NOT_VALID_ARG_MAKE_STRING);  PUSH(IMM(0));  CALL(MAKE_SOB_STRING);  DROP(1);   POP(R1);  POP(FP);  RETURN;    NOT_VALID_ARG_MAKE_STRING:  CALL(ERROR_NOT_VALID_ARG);    HAS_NO_ARGS_MAKE_STRING:  CALL(ERROR_NOT_ENOUGH_ARGS);    TOO_MANY_ARGS_MAKE_STRING:  CALL(ERROR_TOO_MANY_ARGS);