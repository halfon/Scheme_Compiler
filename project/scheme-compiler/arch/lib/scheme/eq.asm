/* eq.asm * Returns true iff there are 2 arguments ans thery are equal under scheme: R0 <- TRUE iff ARG[0] == ARG[1] */ EQ:  PUSH(FP);  MOV(FP, SP);  PUSH(R1);  PUSH(R2);    CMP(FPARG(1), IMM(2));  JUMP_LT(HAS_NO_ARGS_EQ);  JUMP_GT(TOO_MANY_ARGS_EQ);  MOV(R1,IND(FPARG(2)));  CMP(R1,IND(FPARG(3)));  JUMP_NE(CREATE_FALSE_EQ);  CMP(R1,T_INTEGER);  JUMP_EQ(CONTENT_EQ);  CMP(R1,T_FRACTION);  JUMP_EQ(FRACTIN_EQ);  CMP(R1,T_CHAR);  JUMP_EQ(CONTENT_EQ);  CMP(R1,T_SYMBOL);  JUMP_EQ(CONTENT_EQ);  JUMP(ADDRESS_EQ);    FRACTIN_EQ:  MOV(R1,INDD(FPARG(2),1));  MUL(R1,INDD(FPARG(3),2));  MOV(R2,INDD(FPARG(2),2));  MUL(R2,INDD(FPARG(3),1));  CMP(R1,R2);  JUMP_EQ(CREATE_TRUE_EQ);  JUMP(CREATE_FALSE_EQ);    CONTENT_EQ:  MOV(R1,INDD(FPARG(2),1));  MOV(R2,INDD(FPARG(3),1));  CMP(R1,R2);  JUMP_EQ(CREATE_TRUE_EQ);  JUMP(CREATE_FALSE_EQ);    ADDRESS_EQ:  MOV(R1,FPARG(2));  MOV(R2,FPARG(3));  CMP(R1,R2);  JUMP_EQ(CREATE_TRUE_EQ);  JUMP(CREATE_FALSE_EQ);    HAS_NO_ARGS_EQ:  CALL(ERROR_NOT_ENOUGH_ARGS);    TOO_MANY_ARGS_EQ:  CALL(ERROR_TOO_MANY_ARGS);    CREATE_TRUE_EQ:  MOV(R0,TRUE_CONSTANT);  POP(R2);  POP(R1);  POP(FP);  RETURN;    CREATE_FALSE_EQ:  MOV(R0,FALSE_CONSTANT);  POP(R2);  POP(R1);  POP(FP);  RETURN;